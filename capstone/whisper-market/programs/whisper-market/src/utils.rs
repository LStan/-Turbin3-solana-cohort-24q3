use groth16_solana::groth16::{Groth16Verifier, Groth16Verifyingkey};

pub fn verify_proof(
    zk_proof: &[u8],
    message_hash: &[u8],
    encrypt_key_hash: &[u8],
    encrypted_message: &[u8],
    encrypt_nonce: &[u8],
) -> bool {
    let proof_a = zk_proof[0..64].try_into().unwrap();
    let proof_b = zk_proof[64..192].try_into().unwrap();
    let proof_c = zk_proof[192..256].try_into().unwrap();

    let mut public_inputs = [[0u8; 32]; NR_PUBLIC_INPUTS];
    public_inputs[0] = message_hash.try_into().unwrap();
    public_inputs[1] = encrypt_key_hash.try_into().unwrap();
    public_inputs[2] = encrypted_message[0..32].try_into().unwrap();
    public_inputs[3] = encrypted_message[32..64].try_into().unwrap();
    public_inputs[4] = encrypted_message[64..96].try_into().unwrap();
    public_inputs[5] = encrypted_message[96..128].try_into().unwrap();
    public_inputs[6] = encrypted_message[128..160].try_into().unwrap();
    public_inputs[7] = encrypted_message[160..192].try_into().unwrap();
    public_inputs[8] = encrypted_message[192..224].try_into().unwrap();
    public_inputs[9] = encrypted_message[224..256].try_into().unwrap();
    public_inputs[10] = encrypted_message[256..288].try_into().unwrap();
    public_inputs[11] = encrypted_message[288..320].try_into().unwrap();
    public_inputs[12][24..32].copy_from_slice(encrypt_nonce);

    // Initialize the verifier
    let mut verifier =
        Groth16Verifier::new(&proof_a, &proof_b, &proof_c, &public_inputs, &VERIFYINGKEY).unwrap();

    // Perform the verification
    let result = verifier.verify();
    match result {
        Ok(true) => true,
        Ok(false) => false,
        Err(_) => false,
    }
}

const NR_PUBLIC_INPUTS: usize = 13;

pub const VERIFYINGKEY: Groth16Verifyingkey = Groth16Verifyingkey {
    nr_pubinputs: 14,

    vk_alpha_g1: [
        45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234, 51, 251,
        177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190, 221, 80, 60, 55, 206,
        176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131, 10, 25, 35, 3, 1, 240, 118, 202,
        255, 0, 77, 25, 38,
    ],

    vk_beta_g2: [
        9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211, 132, 128,
        166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24, 120, 71, 173, 76, 121,
        131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139, 192, 224, 113, 36, 30, 2, 19, 188,
        127, 193, 61, 183, 171, 48, 76, 251, 209, 224, 138, 112, 74, 153, 245, 232, 71, 217, 63,
        140, 60, 170, 253, 222, 196, 107, 122, 13, 55, 157, 166, 154, 77, 17, 35, 70, 167, 23, 57,
        193, 177, 164, 87, 168, 199, 49, 49, 35, 210, 77, 47, 145, 146, 248, 150, 183, 198, 62,
        234, 5, 169, 213, 127, 6, 84, 122, 208, 206, 200,
    ],

    vk_gamme_g2: [
        25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170, 73, 51,
        53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239, 18, 31, 30, 118,
        66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218, 221, 70, 222, 189, 92,
        217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149,
        188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165,
        219, 140, 109, 235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
        123, 76, 230, 204, 1, 102, 250, 125, 170,
    ],

    vk_delta_g2: [
        21, 215, 2, 237, 131, 74, 116, 239, 127, 113, 142, 203, 162, 66, 96, 120, 218, 150, 182,
        14, 209, 228, 22, 206, 255, 146, 223, 126, 98, 15, 136, 143, 28, 227, 120, 30, 84, 22, 30,
        27, 143, 26, 29, 242, 251, 32, 196, 39, 21, 22, 119, 26, 144, 174, 98, 210, 108, 0, 16,
        145, 137, 25, 248, 13, 23, 53, 133, 200, 134, 157, 97, 247, 247, 220, 19, 41, 77, 63, 52,
        61, 174, 127, 109, 5, 102, 125, 222, 142, 108, 166, 112, 253, 203, 72, 200, 24, 2, 73, 95,
        15, 92, 106, 77, 178, 85, 80, 159, 120, 157, 19, 12, 38, 29, 171, 106, 21, 110, 219, 221,
        170, 13, 199, 128, 242, 18, 250, 172, 197,
    ],

    vk_ic: &[
        [
            34, 168, 80, 41, 183, 116, 91, 181, 181, 88, 200, 188, 185, 247, 247, 141, 204, 219,
            131, 34, 157, 3, 167, 164, 110, 40, 91, 8, 226, 61, 39, 37, 21, 211, 52, 171, 209, 21,
            72, 231, 67, 70, 252, 77, 125, 74, 42, 253, 104, 222, 45, 102, 180, 211, 10, 143, 255,
            126, 124, 69, 46, 25, 83, 32,
        ],
        [
            32, 210, 146, 8, 2, 194, 252, 193, 2, 171, 93, 72, 202, 23, 184, 183, 39, 155, 119,
            229, 121, 156, 228, 212, 241, 121, 110, 209, 21, 137, 21, 92, 48, 47, 236, 63, 167,
            159, 91, 168, 184, 35, 238, 129, 3, 44, 83, 137, 123, 48, 233, 115, 139, 199, 20, 183,
            209, 50, 236, 65, 132, 153, 138, 184,
        ],
        [
            6, 238, 1, 76, 233, 46, 240, 96, 78, 158, 101, 67, 81, 124, 207, 23, 254, 64, 119, 40,
            230, 191, 253, 128, 22, 230, 82, 160, 117, 86, 113, 227, 18, 197, 119, 56, 67, 155, 0,
            228, 159, 85, 37, 243, 75, 194, 222, 122, 89, 32, 110, 36, 111, 169, 241, 97, 42, 188,
            207, 33, 244, 68, 10, 38,
        ],
        [
            37, 55, 190, 72, 136, 63, 216, 160, 20, 178, 176, 81, 162, 231, 237, 81, 218, 122, 197,
            177, 209, 20, 74, 250, 59, 206, 200, 237, 53, 185, 122, 111, 13, 155, 88, 13, 41, 139,
            48, 164, 127, 104, 232, 128, 125, 163, 166, 241, 114, 99, 13, 131, 207, 192, 69, 158,
            250, 200, 162, 155, 10, 117, 146, 48,
        ],
        [
            31, 203, 254, 107, 172, 137, 254, 130, 119, 10, 57, 40, 132, 69, 30, 240, 95, 193, 215,
            12, 36, 230, 132, 118, 131, 102, 156, 68, 45, 5, 225, 187, 36, 53, 224, 29, 213, 133,
            51, 195, 83, 152, 134, 229, 95, 21, 212, 122, 205, 105, 207, 71, 195, 190, 168, 254,
            52, 173, 63, 44, 52, 18, 141, 39,
        ],
        [
            24, 200, 3, 156, 64, 178, 51, 227, 176, 149, 117, 168, 96, 82, 155, 70, 27, 124, 145,
            22, 201, 147, 108, 203, 110, 65, 99, 221, 199, 42, 44, 170, 39, 82, 104, 184, 176, 183,
            219, 182, 242, 103, 37, 20, 135, 22, 159, 204, 48, 107, 160, 7, 150, 107, 114, 31, 139,
            147, 67, 161, 129, 152, 75, 13,
        ],
        [
            30, 81, 144, 158, 173, 40, 62, 75, 78, 232, 129, 246, 224, 12, 27, 136, 83, 4, 53, 73,
            162, 214, 56, 113, 80, 94, 86, 200, 126, 69, 79, 30, 20, 229, 206, 2, 134, 84, 27, 63,
            228, 105, 172, 95, 177, 0, 139, 116, 131, 179, 58, 250, 162, 151, 41, 157, 92, 18, 6,
            243, 140, 85, 236, 181,
        ],
        [
            21, 167, 118, 44, 50, 204, 10, 253, 84, 189, 5, 156, 32, 140, 22, 146, 140, 95, 123,
            62, 34, 205, 32, 153, 116, 86, 63, 117, 167, 19, 52, 160, 25, 235, 135, 119, 235, 185,
            140, 36, 34, 27, 253, 22, 18, 213, 78, 241, 234, 148, 133, 85, 48, 152, 154, 153, 254,
            19, 225, 209, 142, 231, 32, 180,
        ],
        [
            42, 44, 3, 111, 200, 155, 46, 221, 157, 251, 10, 150, 55, 224, 178, 213, 182, 32, 167,
            155, 43, 70, 149, 102, 2, 50, 127, 16, 187, 177, 174, 67, 31, 131, 88, 7, 77, 158, 31,
            164, 229, 184, 12, 156, 217, 191, 200, 167, 66, 73, 1, 65, 209, 233, 169, 213, 247,
            141, 140, 235, 110, 4, 221, 155,
        ],
        [
            25, 89, 178, 133, 3, 189, 17, 244, 208, 105, 81, 21, 35, 33, 211, 67, 157, 88, 144,
            142, 21, 45, 29, 70, 125, 141, 180, 161, 135, 236, 86, 61, 4, 76, 251, 224, 18, 53,
            183, 81, 194, 105, 96, 82, 214, 183, 102, 199, 56, 11, 179, 21, 164, 11, 254, 137, 13,
            53, 6, 34, 244, 176, 179, 61,
        ],
        [
            10, 248, 10, 230, 153, 47, 67, 33, 108, 105, 103, 160, 5, 147, 101, 83, 118, 196, 156,
            135, 208, 212, 95, 142, 57, 182, 187, 229, 160, 42, 10, 112, 48, 68, 127, 246, 199, 99,
            76, 9, 73, 6, 50, 149, 116, 75, 141, 68, 251, 65, 127, 43, 138, 210, 114, 237, 213,
            203, 218, 125, 172, 87, 93, 42,
        ],
        [
            35, 31, 67, 155, 122, 125, 116, 156, 135, 133, 92, 159, 75, 103, 192, 216, 252, 35,
            188, 24, 60, 71, 211, 242, 249, 109, 189, 54, 137, 60, 213, 185, 36, 218, 158, 49, 178,
            142, 130, 36, 20, 51, 10, 140, 199, 206, 18, 219, 231, 37, 184, 206, 17, 116, 114, 237,
            223, 110, 123, 154, 216, 35, 176, 237,
        ],
        [
            41, 123, 142, 41, 179, 201, 213, 189, 42, 170, 137, 6, 10, 87, 190, 151, 91, 60, 51,
            35, 29, 248, 159, 149, 205, 91, 85, 33, 170, 213, 67, 199, 16, 92, 71, 77, 147, 47,
            235, 41, 157, 222, 49, 73, 16, 64, 29, 98, 152, 187, 204, 201, 197, 144, 20, 93, 73,
            113, 244, 112, 192, 214, 249, 190,
        ],
        [
            5, 162, 20, 147, 4, 155, 196, 48, 205, 149, 246, 86, 192, 191, 146, 227, 110, 20, 208,
            49, 29, 171, 195, 100, 19, 77, 45, 175, 110, 230, 72, 131, 46, 111, 64, 250, 60, 201,
            161, 90, 18, 198, 146, 236, 18, 249, 90, 84, 237, 155, 68, 86, 244, 132, 202, 130, 174,
            44, 220, 167, 110, 56, 255, 13,
        ],
    ],
};

#[test]
fn test() {
    let zk_proof = [
        9, 227, 146, 254, 127, 230, 181, 116, 220, 16, 222, 72, 94, 21, 99, 101, 71, 149, 68, 199,
        160, 49, 25, 78, 14, 171, 87, 157, 76, 129, 10, 11, 43, 132, 49, 115, 153, 126, 218, 152,
        32, 113, 53, 84, 197, 69, 72, 199, 177, 231, 36, 172, 145, 31, 244, 173, 145, 134, 252, 38,
        170, 72, 226, 38, 1, 195, 97, 167, 42, 109, 149, 98, 182, 105, 230, 217, 143, 141, 153,
        187, 18, 185, 173, 37, 63, 249, 112, 170, 21, 159, 238, 61, 157, 172, 184, 242, 47, 226,
        11, 180, 21, 5, 65, 196, 234, 174, 131, 59, 201, 14, 233, 209, 245, 166, 164, 51, 247, 199,
        177, 203, 187, 222, 130, 229, 131, 141, 158, 240, 33, 7, 193, 59, 175, 237, 210, 181, 15,
        182, 91, 61, 70, 164, 200, 220, 53, 145, 71, 192, 241, 79, 71, 126, 99, 128, 205, 176, 20,
        0, 226, 59, 30, 230, 202, 124, 115, 191, 240, 243, 188, 79, 174, 130, 96, 172, 47, 7, 219,
        52, 224, 195, 121, 186, 119, 89, 200, 207, 160, 184, 136, 252, 124, 245, 25, 255, 115, 219,
        220, 139, 2, 32, 7, 106, 72, 189, 61, 182, 86, 228, 182, 7, 235, 64, 202, 22, 13, 30, 255,
        140, 160, 187, 208, 47, 133, 144, 20, 34, 166, 215, 253, 151, 222, 203, 80, 224, 194, 195,
        209, 74, 136, 154, 162, 119, 46, 210, 47, 247, 193, 119, 119, 96, 133, 160, 152, 86, 212,
        0,
    ];

    let message_hash = [
        18, 129, 205, 21, 0, 107, 13, 178, 176, 130, 196, 5, 239, 58, 81, 229, 125, 212, 215, 139,
        59, 65, 24, 176, 77, 13, 153, 228, 202, 6, 143, 25,
    ];

    let encrypt_key_hash = [
        45, 12, 195, 166, 44, 140, 145, 145, 74, 107, 36, 33, 23, 10, 135, 111, 151, 112, 38, 78,
        16, 109, 229, 142, 223, 9, 210, 82, 191, 153, 176, 229,
    ];

    let encrypted_message = [
        43, 174, 47, 76, 8, 222, 223, 231, 150, 210, 118, 74, 97, 2, 48, 233, 218, 59, 243, 98, 56,
        6, 70, 206, 153, 228, 162, 148, 173, 20, 16, 69, 2, 120, 234, 68, 146, 133, 248, 103, 72,
        148, 103, 191, 221, 104, 12, 158, 5, 160, 199, 139, 159, 44, 220, 24, 31, 21, 186, 83, 158,
        210, 115, 251, 11, 18, 91, 0, 94, 140, 64, 107, 97, 65, 105, 44, 195, 95, 188, 91, 148,
        108, 106, 185, 251, 125, 184, 175, 252, 92, 73, 242, 15, 121, 110, 140, 15, 236, 203, 251,
        57, 218, 101, 8, 41, 6, 134, 116, 214, 226, 52, 122, 106, 225, 21, 255, 88, 136, 228, 80,
        2, 238, 116, 154, 119, 84, 208, 136, 8, 43, 109, 86, 172, 225, 92, 150, 210, 85, 83, 178,
        173, 192, 73, 255, 232, 67, 51, 90, 195, 81, 57, 98, 31, 125, 9, 204, 146, 195, 156, 194,
        15, 227, 92, 195, 107, 190, 186, 19, 94, 88, 166, 86, 123, 208, 29, 225, 207, 206, 95, 73,
        236, 157, 166, 9, 169, 15, 229, 11, 111, 84, 118, 158, 35, 18, 121, 248, 0, 90, 40, 188,
        132, 216, 202, 144, 134, 164, 36, 91, 90, 228, 68, 17, 176, 136, 235, 162, 251, 40, 124,
        155, 241, 211, 124, 95, 35, 130, 196, 168, 33, 173, 96, 215, 180, 99, 103, 195, 10, 16,
        161, 181, 106, 206, 80, 5, 90, 106, 239, 137, 183, 148, 57, 255, 242, 228, 223, 254, 10,
        132, 134, 157, 200, 38, 17, 48, 72, 100, 142, 134, 155, 170, 49, 204, 199, 210, 44, 127,
        198, 234, 175, 189, 131, 222, 117, 150, 50, 130, 100, 74, 30, 213, 65, 180, 80, 108, 54,
        37, 137, 140, 77, 23, 86, 159, 166, 10, 116, 25, 100, 42, 77, 132, 117, 11, 106, 121, 75,
        255, 249, 72, 202, 33,
    ];

    let encrypt_nonce = [0, 0, 0, 0, 0, 0, 0, 77];

    let res = verify_proof(
        &zk_proof,
        &message_hash,
        &encrypt_key_hash,
        &encrypted_message,
        &encrypt_nonce,
    );
    assert!(res);
}
